{
 "metadata": {
  "name": "corner-finding"
 }, 
 "nbformat": 2, 
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "from matplotlib import gridspec"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 1
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "from scipy import ndimage"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 2
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "from edgedetect import detect_edges, moving_average, threshold"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 3
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "from cornerdetect import (", 
      "    hough_transform, hough_lines, deming, refine_corners, find_corners, reproject,", 
      "    find_target_region, assign_segments)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 4
    }, 
    {
     "cell_type": "markdown", 
     "source": [
      "#### Image Data"
     ]
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "# BEWARE: matplotlib's imread() function (which depends on PIL) flips", 
      "#  .ppm files vertically. This means that image locations will be", 
      "#  completely different if they are compared ", 
      "", 
      "image = imread('Jan23Cal/LEFT/IMG_0001L.png')", 
      "#image = imread('Jan23Paper/LEFT/IMG_0001L.ppm')"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 6
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "image = ndimage.gaussian_filter(image, 1.0)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 18
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "# Cut out the region of the image with the targets", 
      "#image = image[2100:,2600:]", 
      "image = image[:2000,2100:]"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 37
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "r, g, b = [channel.squeeze() for channel in split(image, 3, axis=2)]"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 7
    }, 
    {
     "cell_type": "markdown", 
     "source": [
      "#### Image Display"
     ]
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "def extract_regions(src, dest, width, centers):", 
      "    for center in centers:", 
      "        if width is None:", 
      "            region = tuple(center)", 
      "        else:", 
      "            u = asarray(center) + asarray(width)", 
      "            l = asarray(center) - asarray(width)", 
      "            region = slice(l[0], u[0]), slice(l[1], u[1])", 
      "        dest[region] = src[region]"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 8
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "def display_image(img, show_fft=False, show_edges=True):", 
      "    num_plots = 3 if show_fft else 1", 
      "    ", 
      "    fig = figure(1)", 
      "    fig.clear()", 
      "    grid = gridspec.GridSpec(num_plots,1)", 
      "    ", 
      "    img_axes = fig.add_subplot(grid[0])", 
      "    img_axes.imshow(img, interpolation='nearest', cmap=cm.gray)", 
      "    ", 
      "    if show_edges:", 
      "        y, x = detect_edges(img, 0, noise_level=0.1)", 
      "        img_axes.plot(x, y, 'rx')", 
      "        ", 
      "        y, x = detect_edges(img, 1, noise_level=0.1)", 
      "        img_axes.plot(x, y, 'bx')", 
      "    ", 
      "    if show_fft:", 
      "        f = fftshift(fft2(img))", 
      "        center = tuple(array(f.shape) / 2)", 
      "        mean = f[center]", 
      "        f[center] = 0.0", 
      "        ", 
      "        ft_axes = fig.add_subplot(grid[1])", 
      "        ft_axes.imshow(absolute(f / f.max()), interpolation='nearest')", 
      "        ", 
      "        reimg_axes = fig.add_subplot(grid[2], sharex=img_axes, sharey=img_axes)", 
      "        reimg_axes.clear()", 
      "        fl = zeros_like(f)", 
      "        extract_regions(f, fl, None, [", 
      "        #    (542,1063),", 
      "        #    (528,1062),", 
      "        #    (541,1090),", 
      "        #    (527,1090)", 
      "             (992,1333),", 
      "             (1004,1336),", 
      "             (996,1316),", 
      "             (1008,1319)", 
      "        ])", 
      "        fl[center] = mean", 
      "        g = real(ifft2(ifftshift(fl)))", 
      "        reimg_axes.imshow(g, interpolation='nearest', cmap=cm.gray)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 9
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "display_image(image)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 469
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "display_image(r)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 645
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "display_image(g)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 10
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "display_image(b)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 19
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "checkerboard = np.array([[1.0, 0.0], [0.0, 1.0]])", 
      "checkerboard = repeat(checkerboard, 200, axis=0)", 
      "checkerboard = repeat(checkerboard, 200, axis=1)", 
      "checkerboard = tile(checkerboard, (5, 5))", 
      "#imsave('checkerboard.png', checkerboard)", 
      "display_image(checkerboard)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 607
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "checkerboard = imread('checkerboard.png')[...,0]", 
      "display_image(checkerboard)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 613
    }, 
    {
     "cell_type": "markdown", 
     "source": [
      "#### Edge Properties"
     ]
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "def plot_edge(edge, width=10, margin=5):", 
      "    wm = width + margin", 
      "    t = threshold(edge, width, margin)", 
      "    #e = edge[wm:-wm+1]", 
      "    e = edge", 
      "    N = len(e)", 
      "    ", 
      "    fig = figure(2)", 
      "    fig.clear()", 
      "    grid = gridspec.GridSpec(2,1)", 
      "    ", 
      "    edge_axes = fig.add_subplot(grid[0])", 
      "  ", 
      "    #x = arange(wm, N+wm)", 
      "    x = arange(-N/2+1, N/2+1)", 
      "    ", 
      "    # Edge pixel values", 
      "    #edge_axes.plot(x, e, 'g', label=\"Intensity (interp.)\")", 
      "    edge_axes.bar(x, e, width=1, align='center', color='0.7', label=\"Intensity\")", 
      "", 
      "    # The threshold and associated moving averages", 
      "    #edge_axes.plot(x, moving_average(edge, width)[wm+margin:],  'rx', label=\"Right average\")", 
      "    #edge_axes.plot(x, moving_average(edge, width)[:-wm-margin], 'bx', label=\"Left average\")", 
      "    #edge_axes.step(x-0.5, t, where='mid', label=\"Threshold\")", 
      "    #edge_axes.plot(x, t, label=\"Threshold (interp.)\")", 
      "    ", 
      "    # The difference between the pixel values and the threshold", 
      "    #diff_axes = fig.add_subplot(grid[1], sharex=edge_axes)", 
      "    #diff_axes.plot(x, e - t, 'g.', label=\"Difference\")", 
      "    #diff_axes.axhline(color='b')", 
      "    ", 
      "    #edge_locations = detect_edges(edge, 0, width, margin).squeeze()", 
      "    #for edge_loc in edge_locations:", 
      "    #    edge_axes.axvline(edge_loc)", 
      "    #    diff_axes.axvline(edge_loc)", 
      "", 
      "    edge_axes.axis([x.min(), x.max(), 0, 255])", 
      "    edge_axes.set_ylabel(\"Value (0-255)\")", 
      "    #diff_axes.set_ylabel(\"Value (0-255)\")", 
      "    #diff_axes.set_xlabel(\"Offset (pixels)\")", 
      "    #edge_axes.get_xaxis().set_ticks([])", 
      "    ", 
      "    # Plot the high-pass filter thresholds", 
      "    #range = np.array([(e - t).min(), (e - t).max()])", 
      "    #range *= 0.3", 
      "    #diff_axes.axhspan(range[0], range[1], color='y', alpha=0.15, label=\"Filtered\")", 
      "    ", 
      "    leg = edge_axes.legend(fancybox=True)", 
      "    #leg.get_frame().set_alpha(0.7)", 
      "    #leg = diff_axes.legend(fancybox=True)", 
      "    #leg.get_frame().set_alpha(0.7)", 
      "", 
      "    #edge_axes.annotate(\"center\", xy=(0,0), xytext=(0, -30),", 
      "    #                   textcoords='offset points', horizontalalignment='center')", 
      "    #edge_axes.annotate(\"margin\", xy=(-2.5,0), xytext=(0, -30),", 
      "    #                   textcoords='offset points', horizontalalignment='center',", 
      "    #                   arrowprops=dict(arrowstyle='-[,widthB=2.5'))", 
      "                       "
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 8
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "width = 20", 
      "#center = (553,1425)", 
      "#center = (500,600)", 
      "center = (1460,3200)", 
      "#edge = g[center[0], center[1]-width : center[1]+width+1]", 
      "edge = g[center[0]-width : center[0]+width+1, center[1]]"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 9
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "plot_edge(edge)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 10
    }, 
    {
     "cell_type": "markdown", 
     "source": [
      "#### Edge Detection"
     ]
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "def indices_to_map(shape, indices):", 
      "    indices = array(indices, dtype=int32)", 
      "    map = empty(shape, dtype=bool)", 
      "    map.fill(False)", 
      "    map[tuple(indices)] = True", 
      "    return map", 
      "", 
      "def detect_edge_map(image, noise_level):", 
      "    y_edge_map = indices_to_map(image.shape, detect_edges(image, 0, noise_level=noise_level))", 
      "    x_edge_map = indices_to_map(image.shape, detect_edges(image, 1, noise_level=noise_level))", 
      "    return array(x_edge_map | y_edge_map, dtype=uint8)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 9
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "def plot_hough_lines(binary_image):", 
      "    fig = figure(3)", 
      "    fig.clear()", 
      "    ", 
      "    img_axes = fig.add_subplot(1,1,1)", 
      "    ", 
      "    img_axes.clear()", 
      "    img_axes.imshow(binary_image, interpolation='nearest', cmap=cm.gray)", 
      "", 
      "    return", 
      "    ", 
      "    y, x = binary_image.nonzero()", 
      "    r, theta, points = hough_lines(x, y, 10, math.pi/180)", 
      "    r = array(r, dtype=np.float64)", 
      "    m = -cos(theta)/sin(theta)", 
      "    b = r/sin(theta)", 
      "    ", 
      "    axis = img_axes.axis()", 
      "    x_lim = array(axis[:2])", 
      "    for i in range(len(m)):", 
      "        img_axes.plot(x_lim, m[i]*x_lim + b[i], 'r')", 
      "    img_axes.axis(axis)", 
      "", 
      "    all_points = np.concatenate(points)", 
      "    img_axes.plot(x[all_points], y[all_points], 'bx')"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 10
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "g_edges = detect_edge_map(g, 0.1)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 47
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "plot_hough_lines(g_edges)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 48
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "fig = figure(4)", 
      "fig.clear()", 
      "grid = gridspec.GridSpec(1,1)", 
      "", 
      "x, y = g_edges.nonzero()", 
      "hough_image, _, _ = hough_transform(x, y, 10, pi/720)", 
      "", 
      "img_axes = fig.add_subplot(grid[0])", 
      "img_axes.imshow(hough_image, interpolation='nearest')"
     ], 
     "language": "python", 
     "outputs": [
      {
       "output_type": "pyout", 
       "prompt_number": 53, 
       "text": [
        "&lt;matplotlib.image.AxesImage at 0x13fede490&gt;"
       ]
      }
     ], 
     "prompt_number": 53
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "x, y = g_edges.nonzero()", 
      "hough_image, _, _ = hough_transform(x, y, 4.5, pi/1680)", 
      "imsave('awesome.png', hough_image.T, cmap=cm.jet)", 
      "hough_image = None"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 56
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "def supress_non_maxima(data):", 
      "    # Adapted from http://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array", 
      "    neighborhood = ndimage.generate_binary_structure(2, 2)", 
      "    maxima = ndimage.maximum_filter(data, footprint=neighborhood) == data", 
      "    result = np.zeros_like(data)", 
      "    result[maxima] = data[maxima]", 
      "    return result"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 118
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "fig = figure(5)", 
      "fig.clear()", 
      "grid = gridspec.GridSpec(2,1)", 
      "", 
      "img = ndimage.gaussian_filter(g, 2.0)", 
      "", 
      "y_edges = ndimage.sobel(img, 0)", 
      "x_edges = ndimage.sobel(img, 1)", 
      "edge_norm = np.sqrt(y_edges**2 + x_edges**2)", 
      "", 
      "edge_norm = supress_non_maxima(edge_norm)", 
      "edge_norm[edge_norm < 0.2 * edge_norm.max()] = 0.0", 
      "edge_norm[edge_norm > 0.0] = 1.0", 
      "", 
      "img_axes = fig.add_subplot(grid[0])", 
      "img_axes.imshow(edge_norm, interpolation='nearest', cmap='gray')", 
      "", 
      "x, y = edge_norm.nonzero()", 
      "hough_image, _, _ = hough_transform(x, y, 10, pi/720)", 
      "hough_axis = fig.add_subplot(grid[1])", 
      "hough_axis.imshow(hough_image, interpolation='nearest')"
     ], 
     "language": "python", 
     "outputs": [
      {
       "output_type": "pyout", 
       "prompt_number": 132, 
       "text": [
        "&lt;matplotlib.image.AxesImage at 0x1448bad90&gt;"
       ]
      }
     ], 
     "prompt_number": 132
    }, 
    {
     "cell_type": "markdown", 
     "source": [
      "#### Corner Finding"
     ]
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "corners = []", 
      "corners.append(np.load('IMG_0001L.B.npy'))", 
      "corners.append(np.load('IMG_0001L.R.npy'))"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 12
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "corners = [np.swapaxes(c, 0, 2) for c in corners]"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 13
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [
      "homographies = []", 
      "homographies.append(np.loadtxt('IMG_0001L.Bhom.txt'))", 
      "homographies.append(np.loadtxt('IMG_0001L.Rhom.txt'))"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 14
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "target_regions = [find_target_region(c, g.shape) for c in corners]", 
      "target_regions"
     ], 
     "language": "python", 
     "outputs": [
      {
       "output_type": "pyout", 
       "prompt_number": 15, 
       "text": [
        "[Region(3678, 4619, 2263, 3011), Region(2956, 3399, 2214, 2931)]"
       ]
      }
     ], 
     "prompt_number": 15
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": [
      "fig = figure(6)", 
      "fig.clear()", 
      "", 
      "img_axes = fig.add_subplot(1,1,1)", 
      "img_axes.imshow(g, interpolation='nearest', cmap=cm.gray)", 
      "", 
      "flat_corners = [c.reshape((2,-1)) for c in corners]", 
      "reprojected_corners = map(reproject, homographies, flat_corners)", 
      "for corner_set in reprojected_corners:", 
      "    x, y = corner_set", 
      "    img_axes.plot(x, y, 'b.', markeredgewidth=0.1, markersize=10)", 
      "", 
      "for region, region_corners, homography in zip(target_regions, corners, homographies):", 
      "    y, x = detect_edges(g[region.s], margin=10, noise_level=0.2)", 
      "    y += region.min[0]", 
      "    x += region.min[1]", 
      "    edges = np.array([x, y])", 
      "    ", 
      "    corner_shape = region_corners.shape[1:]", 
      "", 
      "    new_corners = find_corners(edges, corner_shape, homography)", 
      "    ", 
      "    x, y = new_corners", 
      "    img_axes.plot(x, y, 'r.', markeredgewidth=0.1, markersize=10)", 
      "    ", 
      "    # Annotate edge points", 
      "    nearest_corners, directions = assign_segments(edges, homography)", 
      "    for row, col in np.ndindex(corner_shape):", 
      "        on_corner = (nearest_corners == [[row],[col]]).all(axis=0)", 
      "        for direction in range(2):", 
      "            in_segment = on_corner & (directions == direction)", 
      "            xs, ys = edges[:,in_segment]", 
      "            ", 
      "            if (row + col + direction) % 2 == 0:", 
      "                color = 'm'", 
      "            else:", 
      "                color = 'g'", 
      "            img_axes.plot(xs, ys, '.', color=color, markeredgewidth=0.1, markersize=10)"
     ], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 19
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": [], 
     "language": "python", 
     "outputs": [], 
     "prompt_number": "&nbsp;"
    }
   ]
  }
 ]
}